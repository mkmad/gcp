version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
      args:
        - REACT_APP_FIREBASE_API_KEY=${FIREBASE_API_KEY}
        - REACT_APP_FIREBASE_AUTH_DOMAIN=${FIREBASE_AUTH_DOMAIN}
        - REACT_APP_FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
        - REACT_APP_FIREBASE_STORAGE_BUCKET=${FIREBASE_STORAGE_BUCKET}
        - REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${FIREBASE_MESSAGING_SENDER_ID}
        - REACT_APP_FIREBASE_APP_ID=${FIREBASE_APP_ID}
    ports:
      - "3000:3000"
    volumes:
      # Preserve the scripts directory
      - /usr/src/app-scripts
      # Mount source code
      - ./frontend:/app
      # Preserve node_modules
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_ENV=${ENV}
      - REACT_APP_API_URL=http://localhost:8080
      # Firebase config
      - REACT_APP_FIREBASE_API_KEY=${FIREBASE_API_KEY}
      - REACT_APP_FIREBASE_AUTH_DOMAIN=${FIREBASE_AUTH_DOMAIN}
      - REACT_APP_FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - REACT_APP_FIREBASE_STORAGE_BUCKET=${FIREBASE_STORAGE_BUCKET}
      - REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${FIREBASE_MESSAGING_SENDER_ID}
      - REACT_APP_FIREBASE_APP_ID=${FIREBASE_APP_ID}
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/firebase-service-account.json:/app/firebase-service-account.json:ro
    environment:
      - NODE_ENV=development
      - ENV=${ENV}
      - DB_USER=postgres
      - DB_PASS=postgres
      - DB_NAME=idp_poc
      - DB_HOST=db
      - GOOGLE_APPLICATION_CREDENTIALS=/app/firebase-service-account.json
      - GOOGLE_CLOUD_PROJECT=proj-a-429014
      - PROJECT_ID=proj-a-429014
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=idp_poc
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data: 